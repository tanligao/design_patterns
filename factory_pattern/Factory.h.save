#ifndef FACTORY_H_INCLUDED
#define FACTORY_H_INCLUDED
//test the abstract factory pattern
//there are two core product with multi number core

class Single
{
public:
    Single(){}
    ~Single(){}
    virtual void print() = 0;
};

class SingleA : public Single
{
public:
    SingleA(){}
    ~SingleA(){}
    void print()
    {
        std::cout << "SingleA" << std::endl;
    }
};

class SingleB : public Single
{
public:
    SingleB(){}
    ~SingleB(){}
    void print()
    {
        std::cout << "SingleB" << std::endl;
    }
};

class Multi
{
public:
    Multi(){}
    ~Multi(){}
    virtual void print() = 0;
};

class MultiA : public Multi
{
public:
    MultiA(){}
    ~MultiA(){}
    void print()
    {
        std::cout << "MultiA" << std::endl;
    }
};

class MultiB : public Multi
{
public:
    MultiB(){}
    ~MultiB(){}
    void print()
    {
        std::cout << "MultiB" << std::endl;
    }
};

class Product





#endif // FACTORY_H_INCLUDED
